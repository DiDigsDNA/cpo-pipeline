#!/usr/bin/env python

'''
This script is a wrapper for resistance gene idenfification from assemblies.

It uses abricate and rgi for AMR profile prediction and plasmid predictions.

Example usage:

  pipeline.py --id BC11-Kpn005 --assembly BC11-Kpn005_S2.fa --output output
'''

import argparse
import os
import datetime
import sys
import time
import configparser
import re

import drmaa

from pkg_resources import resource_filename

from cpo_pipeline.pipeline import prepare_job
from cpo_pipeline.resistance.parsers import result_parsers

def main(parser, config, assembly):
    """
    main entrypoint
    Args:
        parser():
        config():
        assembly():
    Returns:
        (void)
    """
    if not parser:
        script_name = os.path.basename(os.path.realpath(sys.argv[0]))
        parser = argparse.ArgumentParser(prog=script_name)
        parser.add_argument("-i", "--ID", dest="sample_id",
                            help="identifier of the isolate")
        parser.add_argument("-o", "--output", dest="output", default='./',
                            help="absolute path to output folder")
    parser.add_argument("-a", "--assembly", dest="assembly",
                        help="Path to assembly file.")
    parser.add_argument("-c", "--card-json", dest="card_json",
                        help="absolute path to card database (json format)")
    parser.add_argument("-p", "--abricate-cpo-plamid-db", dest="abricate_cpo_plasmid_db",
                        help="absolute path to card database (json format)")
    parser.add_argument("-d", "--abricate-datadir", dest="abricate_datadir",
                        help="absolute path to card database (json format)")

    args = parser.parse_args()

    if not config:
        config = configparser.ConfigParser()
        config_file = resource_filename('data', 'config.ini')
        config.read(config_file)

    if not assembly:
        assembly = args.assembly

    if args.card_json and not config['databases']['card_json']:
        card_path = args.card_json
    else:
        card_path = config['databases']['card_json']

    if args.abricate_datadir and not config['databases']['abricate_datadir']:
        abricate_datadir = args.abricate_datadir
    else:
        abricate_datadir = config['databases']['abricate_datadir']

    if args.abricate_cpo_plasmid_db and not config['databases']['abricate_cpo_plasmid_db']:
        abricate_cpo_plasmid_db = args.abricate_cpo_plasmid_db
    else:
        abricate_cpo_plasmid_db = config['databases']['abricate_cpo_plasmid_db']

    sample_id = args.sample_id
    output_dir = args.output


    print(str(datetime.datetime.now()) + "\n\nsample_id " + sample_id + "\nAssembly: " + assembly)

    file_paths = {
        'abricate_path': '/'.join([output_dir, sample_id, 'resistance', 'abricate', 'abricate.tsv']),
        'rgi_path': "/".join([output_dir, sample_id, 'resistance', 'rgi', 'rgi'])
    }

    job_script_path = resource_filename('data', 'job_scripts')

    resistance_jobs = [
        {
            'job_name': 'abricate',
            'native_specification': '-pe smp 8',
            'remote_command': os.path.join(job_script_path, 'abricate.sh'),
            'args': [
                "--input", assembly,
                "--datadir", abricate_datadir,
                "--database", abricate_cpo_plasmid_db,
                "--output_file", file_paths['abricate_path']
            ]
        },
        {
            'job_name': 'rgi',
            'native_specification': '-pe smp 8',
            'remote_command': os.path.join(job_script_path, 'rgi.sh'),
            'args': [
                "--input", assembly,
                "--card_json", card_path,
                "--output_file", file_paths['rgi_path']
            ]
        }
    ]

    with drmaa.Session() as session:
        prepared_jobs = [prepare_job(job, session) for job in resistance_jobs]
        running_jobs = [session.runJob(job) for job in prepared_jobs]
        for job_id in running_jobs:
            print('Your job has been submitted with ID %s' % job_id)
        session.synchronize(running_jobs, drmaa.Session.TIMEOUT_WAIT_FOREVER, True)


    abricate_report_path = "/".join([output_dir, sample_id, "resistance", "abricate", "abricate.tsv"])
    abricate_report = result_parsers.parse_abricate_result(abricate_report_path)

    rgi_report_path = "/".join([output_dir, sample_id, "resistance", "rgi", "rgi.txt"])
    rgi_report = result_parsers.parse_rgi_result_txt(rgi_report_path)

    def get_abricate_carbapenemases(abricate_report):
        """
        Given a list of dicts generated by parsing an abricate report file,
        return a list of carbapenemases.
        Args:
            abricate_report (list of dict):
        Returns:
            list: likely plasmid contigs
            For example: ['NDM-1', '', '', ...]
        """
        abricate_carbapenemases = []
        for abricate_report_record in abricate_report:
            abricate_carbapenemases.append(abricate_report_record['gene'])
        return abricate_carbapenemases

    def get_rgi_carbapenemases(rgi_report):
        """
        Given a list of dicts generated by parsing an rgi report file,
        return a list of carbapenemases.
        Args:
            rgi_report (list of dict):
        Returns:
            list: likely plasmid contigs
            For example: ['', '', '', ...]
        """
        rgi_carbapenemases = []
        for rgi_report_record in rgi_report:
            if re.search("carbapenem", rgi_report_record['drug_class']):
                rgi_carbapenemases.append(rgi_report_record['best_hit_aro'])
        return rgi_carbapenemases

if __name__ == "__main__":
    START = time.time()
    print("Starting workflow...")
    main(None, None, None)
    END = time.time()
    print("Finished!\nThe analysis used: " + str(END - START) + " seconds")
