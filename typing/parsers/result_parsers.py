# -*- coding: utf-8 -*-
"""cpo-pipeline.typing.parsers.result_parsers

This module provides functions for parsing result files generated by tools
during the Typing phase of the cpo-pipeline.
"""

import pandas

def parse_mlst_result(path_to_mlst_result, scheme):
    """
    Args:
        path_to_mlst_result (str): Path to the kraken report file.
        scheme (str): Path to MLST scheme

    Returns:
        dict: Parsed mlst report.
        For example:
        { "": { "": ,
                "": ,
                ...
              }
          "": { "": ,
                ...
              }
        }
    """
    _mlstResult = {}
    scheme = pandas.read_csv(scheme, delimiter='\t', header=0)
    scheme = scheme.replace(numpy.nan, '', regex=True)

    taxon = {}
    #record the scheme as a dictionary
    taxon["-"] = "No MLST Match"
    for i in range(len(scheme.index)):
        key = scheme.iloc[i,0]
        if (str(scheme.iloc[i,2]) == "nan"):
            value = str(scheme.iloc[i,1])
        else:
            value = str(scheme.iloc[i,1]) + " " + str(scheme.iloc[i,2])
        
        if (key in taxon.keys()):
            taxon[key] = taxon.get(key) + ";" + value
        else:
            taxon[key] = value
    #read in the mlst result
    mlst = pandas.read_csv(path_to_mlst_result, delimiter='\t', header=None)
    _mlstHit = {}

    _mlstHit['file'] = mlst.iloc[0,0]
    _mlstHit['species_id'] = (mlst.iloc[0,1])
    _mlstHit['sequence_type'] = str(mlst.iloc[0,2])
    for i in range(3, len(mlst.columns)):
        _mlstHit['scheme'] += mlst.iloc[0,i] + ";"
    _mlstHit['species'] = taxon[_mlstHit.speciesID]
    _mlstHit['row'] = "\t".join(str(x) for x in mlst.ix[0].tolist())
    _mlstResult[_mlstHit['species_id']]=_mlstHit

    return _mlstResult
