# -*- coding: utf-8 -*-
"""cpo-pipeline.typing.parsers.result_parsers

This module provides functions for parsing result files generated by tools
during the Typing phase of the cpo-pipeline.
"""

import csv
import pandas
import numpy

def parse_mlst_result(path_to_mlst_result, mlst_scheme_map):
    """
    Args:
        path_to_mlst_result (str): Path to the kraken report file.
        mlst_scheme_map (str): Path to MLST scheme map file

    Returns:
        dict: Parsed mlst report.
        For example:
        { 'ecoli': { 'file': '/path/to/contig.fa',
                     'species_id': 'ecoli',
                     'sequence_type': '405',
                     'species':, 'Escherichia  ;Shigella ',
                     'row': '/path/to/contig.fa\tecoli\t405\tadk(35)\tfumC(37)\tgyrB(29)\ticd(25)\tmdh(4)\tpurA(5)\trecA(73)'
                   }
        }
    """
    mlst_result = {}
    scheme = pandas.read_csv(mlst_scheme_map, delimiter='\t', header=0)
    scheme = scheme.replace(numpy.nan, '', regex=True)
    taxon = {}
    #record the scheme as a dictionary
    """
    structure of taxon dict:
    { '-': 'No MLST Match',
      'abaumannii': 'Acinetobacter baumannii',
      'abaumannii_2': 'Acinetobacter baumannii',
      ...
      'campylobacter': 'Campylobacter coli;Campylobacter jejuni',
      'cdifficile': 'Clostridium difficile;Peptoclostridium difficile',
      ...
    }
    """
    taxon["-"] = "No MLST Match"
    for i in range(len(scheme.index)):
        key = scheme.iloc[i,0]
        if (str(scheme.iloc[i,2]) == "nan"):
            value = str(scheme.iloc[i,1])
        else:
            value = str(scheme.iloc[i,1]) + " " + str(scheme.iloc[i,2])
        
        if (key in taxon.keys()):
            taxon[key] = taxon.get(key) + ";" + value
        else:
            taxon[key] = value
    #read in the mlst result
    pprint.pprint(taxon)
    mlst = pandas.read_csv(path_to_mlst_result, delimiter='\t', header=None)
    mlst_hit = {}
    mlst_hit['scheme'] = ""
    """
    structure of mlst_hit dict:
    { "file": "/path/to/contig.fa",
      "species_id": "ecoli",
      "sequence_type": "405",
      "species":, "Escherichia  ;Shigella ",
      "row": "/path/to/contig.fa\tecoli\t405\tadk(35)\tfumC(37)\tgyrB(29)\ticd(25)\tmdh(4)\tpurA(5)\trecA(73)"
    } 
    """
    mlst_hit['file'] = mlst.iloc[0,0]
    mlst_hit['species_id'] = (mlst.iloc[0,1])
    mlst_hit['sequence_type'] = str(mlst.iloc[0,2])
    for i in range(3, len(mlst.columns)):
        mlst_hit['scheme'] += mlst.iloc[0,i] + ";"
    mlst_hit['species'] = taxon[mlst_hit['species_id']]
    mlst_hit['row'] = "\t".join(str(x) for x in mlst.ix[0].tolist())
    mlst_result[mlst_hit['species_id']] = mlst_hit
    return mlst_result
