# -*- coding: utf-8 -*-
"""cpo-pipeline.tree.parsers.result_parsers

This module provides functions for parsing result files generated by tools
during the Tree phase of the cpo-pipeline.
"""

import pandas
import pprint

def parse_workflow_results(path_to_result):
    """
    Args:
        path_to_result (str): Path to the result file.

    Returns:
        dict: Parsed kraken report with species-level results.
        For example:
        { "Escherichia coli": { "fragment_percent": 84.08,
                                "fragment_count_root": 195536,
                                "fragment_count_taxon": 192561,
                                "rank_code": "S",
                                "ncbi_taxon_id": "562",
                                "name": "Escherichia coli",
                                "row": " 84.08\t195563\t192561\tS\t562\tEscherichia coli"
                              }
          "Another species": { "fragment_percent": 12.1,
                               ...
                             }
        }
        See kraken manual for more detail on report fields:
        http://ccb.jhu.edu/software/kraken/MANUAL.html#sample-report-output-format
    """
    worflowResult = {}
    r = pandas.read_csv(pathToResult, delimiter='\t', header=0) 
    r = r.replace(numpy.nan, '', regex=True)
    naResult = { "new": False,
                 "ID": "?",
                 "ExpectedSpecies": "?",
                 "MLSTSpecies": "?",
                 "SequenceType": "?",
                 "MLSTScheme": "?",
                 "CarbapenemResistanceGenes": "?",
                 "plasmidBestMatch": "?",
                 "plasmididentity": -1,
                 "plasmidsharedhashes": "?",
                 "OtherAMRGenes": "?",
                 "TotalPlasmids": -1,
                 "plasmids": [],
                 "DefinitelyPlasmidContigs": "?",
                 "LikelyPlasmidContigs": "?",
                 "row": ""
               }
    worflowResult["na"] = naResult
    for i in range(len(r.index)):  
        results = {}
        if(str(r.loc[r.index[i], 'new']).lower() == "new"):
            results['new'] = True
        else:
            results['new'] = False        
        results['ID'] = str(r.loc[r.index[i], 'ID']).replace(".fa","")
        results['ExpectedSpecies'] = str(r.loc[r.index[i], 'Expected Species'])
        results['MLSTSpecies'] = str(r.loc[r.index[i], 'MLST Species'])
        results['SequenceType'] = str(r.loc[r.index[i], 'Sequence Type'])
        results['MLSTScheme'] = (str(r.loc[r.index[i], 'MLST Scheme']))
        results['CarbapenemResistanceGenes'] = (str(r.loc[r.index[i], 'Carbapenem Resistance Genes']))
        results['OtherAMRGenes'] = (str(r.loc[r.index[i], 'Other AMR Genes']))
        results['TotalPlasmids'] = int(r.loc[r.index[i], 'Total Plasmids'])
        results['plasmidBestMatch'] = str(r.loc[r.index[i], 'Plasmid Best Match'])
        results['plasmididentity'] = str(r.loc[r.index[i], 'Plasmid Identity'])
        results['plasmidsharedhashes'] = str(r.loc[r.index[i], 'Plasmid Shared Hash'])
        results['plasmids'] = []
        for j in range(0,_results['TotalPlasmids']):
            plasmid = {}
            plasmid['PlasmidsID'] =(((str(r.loc[r.index[i], 'Plasmids ID'])).split(";"))[j])
            plasmid['Num_Contigs'] = (((str(r.loc[r.index[i], 'Num_Contigs'])).split(";"))[j])
            plasmid['PlasmidLength'] = (((str(r.loc[r.index[i], 'Plasmid Length'])).split(";"))[j])
            plasmid['PlasmidRepType'] = (((str(r.loc[r.index[i], 'Plasmid RepType'])).split(";"))[j])
            plasmid['PlasmidMobility'] = ((str(r.loc[r.index[i], 'Plasmid Mobility'])).split(";"))[j]
            plasmid['NearestReference'] = ((str(r.loc[r.index[i], 'Nearest Reference'])).split(";"))[j]
            results['plasmids'].append(plasmid)
        results['DefinitelyPlasmidContigs'] = (str(r.loc[r.index[i], 'Definitely Plasmid Contigs']))
        results['LikelyPlasmidContigs'] = (str(r.loc[r.index[i], 'Likely Plasmid Contigs']))
        results['row'] = "\t".join(str(x) for x in r.ix[i].tolist())
        worflowResult[results['ID']] = results
        print("*** BEGIN parse_workflow_result() OUTPUT ***")
        pprint.pprint(workflowResult)
        print("*** END parse_workflow_result() OUTPUT ***")
    return worflowResult
